#!/usr/bin/env python
import rospy
from std_msgs.msg import Float64MultiArray
import actionlib
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint

def main_velocity():
    cmd_pub=rospy.Publisher('/mm/manipulator_controller/command',Float64MultiArray,queue_size=10)
    rate=rospy.Rate(10)
    start_time=rospy.get_time()
    while not rospy.is_shutdown():
        command=Float64MultiArray()
        #this list is the velocity of each joint:
        #- mm/virtual_x
        #- mm/virtual_y
        #- mm/virtual_z
        #- mm/shoulder_pan_joint
        #- mm/shoulder_lift_joint
        #- mm/elbow_joint
        #- mm/wrist_1_joint
        #- mm/wrist_2_joint
        #- mm/wrist_3_joint
        command.data=[0,0,0,0,0,0,0,0,0]
        if rospy.get_time()-start_time < 4:
            command.data[0]=-1
            command.data[5]=-1
        elif rospy.get_time()-start_time < 8:
            command.data[0]=1
            command.data[5]=1
        else:
            start_time=rospy.get_time()
        cmd_pub.publish(command)
        print(rospy.get_time()-start_time)
        rate.sleep() 

def main_position_tra():
    action_ns='/mm/manipulator_controller/follow_joint_trajectory'
    # action client
    action_client = actionlib.SimpleActionClient(action_ns, FollowJointTrajectoryAction)
    action_client.wait_for_server()
    rospy.loginfo('detect the server')
    count=0
    rate=rospy.Rate(50)
    while not rospy.is_shutdown() and count<100:
        #action goal
        goal = FollowJointTrajectoryGoal()
        goal.trajectory.header.stamp = rospy.Time.now()

        # current joint point in the trajectory
        trajPt = JointTrajectoryPoint()
        goal.trajectory.joint_names=['mm/shoulder_pan_joint','mm/shoulder_lift_joint','mm/elbow_joint','mm/wrist_1_joint','mm/wrist_2_joint','mm/wrist_3_joint']
        trajPt.positions=[0,-0.5-0.01*count,-1,0,0,0]
        #trajPt.positions=[0,-1.5+0.01*count,-1,0,0,0]
        trajPt.time_from_start=rospy.Duration(secs=0.02)
        goal.trajectory.points.append(trajPt)
        action_client.send_goal(goal)
        count+=1
        # wait for the result
        rospy.loginfo("Start waiting for finishing the given pose")
        #action_client.wait_for_result()
        #rospy.loginfo("Waiting ends")

        # show the error code
        #rospy.loginfo(action_client.get_result())
        rate.sleep()



if __name__ =='__main__':
    rospy.init_node('controller_test')
    main_position_tra()
